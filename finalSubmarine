(define (domain submarine)
    (:requirements
        :strips
        :typing
    )
    
    ;TO DO LIST THAT I SKIPPED
    ;TRANSFER PIC TO DATABASE

    (:types
        crew
        rooms
        auv
        squids
    )

    (:predicates
        (location ?l)
        (subLocation ?sL)
        (artefact ?a)
        (area ?object ?area)
        (connected ?room1 ?room2)
        (immobile)
        (electrified)
        (squidEncounter)
        (squidElectrocute)
        (destroyAUV ?auv)
        (report ?artefact)
        (takePic ?artefact)
        (dive)
        (resurface)
        (resetDive)
        (deployed)
    )
    
    (:action moveSub
        :parameters
        (?current ?destination)
        
        ;we basically need to check for several things
        :precondition
        (and
            (subLocation ?current)
            (location ?destination)
            (not(immobile))
            (area captain bridge)
            (area navigator bridge)
            (dive)
            (not(resurface))
            (not(resetDive))
        )
        
        :effect
        (and
            (subLocation ?destination)
            (not(location ?destination))
            (not(subLocation ?current))
            (location ?current)
            (resetDive)
            (when 
                (exists (?squid - squids) 
                    (and (area ?squid ?destination))
                ) 
                (and (squidEncounter)(immobile))
            )
        )
    )
    
    (:action moveRoom
        :parameters 
        (?person - crew ?room - rooms ?current - rooms)
        
        :precondition
        (and
            (area ?person ?current)
            (connected ?current ?room)
        )   
        
        :effect
        (and
            (area ?person ?room)
            (not(area ?person ?current))
        )
    )
    
    (:action sendUAV
        :parameters
        (?AUV - auv ?location)
        
        :precondition
        (and
            (subLocation ?location)
            (or(area IAUV launchbay)(area MAUV launchbay))
            (area engineer launchbay)
            (not(destroyAUV ?AUV))
            (not(deployed))
        )
        
        :effect
        (and
            (area ?AUV ?location)
            (not(area ?AUV launchbay))
            (when (squidEncounter) (destroyAUV ?AUV))
            (deployed)
        )
    )
    
    (:action pickupUAV
        :parameters
        (?AUV - auv ?location)
        
        :precondition   
        (and
            (subLocation ?location)
            (area ?AUV ?location)
            (area engineer launchbay)
            (not(destroyAUV ?AUV))
            (deployed)
        )
        
        :effect
        (and
            (area ?AUV launchbay)
            (not(area ?AUV ?location))
            (not(deployed))
        )
    )
    
    (:action picture
        :parameters
        (?location ?artefact)
        
        :precondition
        (and
            (subLocation ?location)
            (artefact ?artefact)
            (not(destroyAUV iauv))
            (area iauv ?location)
            (area ?artefact ?location)
        )
        
        :effect
        (and
            (area ?artefact iauv)
            (takePic ?artefact)
        )
    )
    
    (:action transferPictureToMemoryUnit
        :parameters
        (?artefact)
        
        :precondition
        (and
            (area iauv launchbay)
            (area ?artefact iauv)
            (takePic ?artefact)
        )
        
        :effect
        (and
            (area ?artefact memoryunit)
        )
    )
    
    (:action grabArtefact
        :parameters
        (?location ?artefact)
        
        :precondition
        (and
            (subLocation ?location)
            (artefact ?artefact)
            (not(destroyAUV mauv))
            (area mauv ?location)
            (area ?artefact ?location)
        )
        
        :effect
        (and
            (not(area ?artefact ?location))
            (area ?artefact mauv)
            
        )
    )
    
    (:action transferArtefact
        :parameters
        (?artefact)
        
        :precondition
        (and
            (artefact ?artefact)
            (area ?artefact mauv)
            (area mauv launchbay)
        )
        
        :effect
        (and
            (not(area ?artefact mauv))
            (area ?artefact launchbay)
        )
    )
    
    (:action electrocute
        :parameters
        (?squid - squids ?subLocation)
        
        :precondition
        (and
            (subLocation ?subLocation)
            (squidElectrocute)
            (not(electrified))
            (area engineer engineering)
        )
        
        :effect
        (and
            (electrified)
            (not(area ?squid ?subLocation))
            (not(immobile))
            (not(squidElectrocute))
            (not(squidEncounter))
        )
    )
    
    (:action squidGrab
        :precondition
        (and
            (squidEncounter)
        )
        
        :effect
        (and
            (immobile)
            (squidElectrocute)
        )
    )
    
    (:action recharge
        :precondition
        (and
            (electrified)
            (area engineer engineering)
        )
            
        :effect
        (and
            (not(electrified))
        )
    )
    
    (:action scienceGrabArtefact
        :parameters
        (?artefact)
        
        :precondition
        (and
            (artefact ?artefact)
            (area ?artefact launchbay)
            (area scientist launchbay)
        )
        
        :effect
        (and
            (not(area ?artefact launchbay))
            (area ?artefact scientist)
        )
    )
    
    (:action examineArtefact
        :parameters 
        (?artefact)
        
        :precondition
        (and
            (artefact ?artefact)
            (area ?artefact scientist)
            (area scientist sciencelab)
        )
        
        :effect
        (and
            (area ?artefact sciencelab)
            (report ?artefact)
            (not (area ?artefact scientist))
        )
    )
    
    (:action sendData
        :parameters
        (?object)
        
        :precondition
        (and
            (or(and(report ?object)) (and (area ?object memoryunit)(takePic ?object)))
            (resurface)
        )
        
        :effect
        (and
            (area ?object seaPort)
        )
    )
    
    (:action diving
        :precondition
        (and
            (subLocation surface)
            (not(dive))
            (resurface)
            (not(immobile))
        )
        
        :effect
        (and
            (dive)
            (not(resurface))
        )
    )
    
    (:action resurfacing
        :parameters
        (?whereIsTheSub)
        :precondition
        (and
            (subLocation ?whereIsTheSub)
            (location surface)
            (resetDive)
            (dive)
            (not(resurface))
            (not(immobile))
        )
        
        :effect
        (and
            (not(subLocation ?whereIsTheSub))
            (location ?whereIsTheSub)
            (subLocation surface)
            (not(location surface))
            (not(dive))
            (resurface)
            (not(resetDive))
        )
    )
)  
